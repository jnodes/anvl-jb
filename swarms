import { useState } from 'react';

// This is a simulated implementation of the ANVL AI agents and swarm
// orchestration. In a production environment, this JavaScript code would
// communicate with a WebAssembly (WASM) module built from the actual Rust
// 'ruv-swarm' and 'ruv-fann' crates.

// For this demo, we'll use mock data and a simulated asynchronous delay
// to represent the computation performed by the specialized AI agents.

function App() {
  const [swarmStatus, setSwarmStatus] = useState({
    riskAssessment: 'Idle',
    compliance: 'Idle',
    contractAutomation: 'Idle',
    marketIntelligence: 'Idle',
  });

  const [swarmOutputs, setSwarmOutputs] = useState({
    riskScore: null,
    complianceStatus: null,
    transactionStatus: null,
    dynamicRate: null,
    alerts: [],
  });

  // Helper function to simulate asynchronous agent work
  const simulateWork = () => new Promise(resolve => setTimeout(resolve, 1000));

  // Simulates the Risk Assessment & Underwriting Swarm
  const runRiskAssessmentSwarm = async () => {
    setSwarmStatus(prev => ({ ...prev, riskAssessment: 'Running...' }));
    setSwarmOutputs(prev => ({ ...prev, riskScore: null, alerts: [] }));
    await simulateWork();

    // In production, 'ruv-swarm' would spin up multiple 'ruv-fann' agents:
    // CreditAnalyst, MarketAnalyst, ComplianceOfficer, VehicleValuator.
    // Each agent would run a specialized neural network model.

    // Mock agent outputs for demo purposes
    const creditScore = Math.random() * 0.4 + 0.6; // Simulates a score between 0.6 and 1.0
    const marketScore = Math.random() * 0.4 + 0.6;
    const complianceScore = Math.random() * 0.4 + 0.6;
    const vehicleValueScore = Math.random() * 0.4 + 0.6;

    // Simulate the weighted average from the whitepaper's formula
    // R_s = w_c * S_c + w_m * S_m + w_co * S_co + w_v * S_v
    const weights = { wc: 0.25, wm: 0.25, wco: 0.25, wv: 0.25 };
    const calculatedRiskScore = (
      weights.wc * creditScore +
      weights.wm * marketScore +
      weights.wco * complianceScore +
      weights.wv * vehicleValueScore
    ).toFixed(2);

    setSwarmOutputs(prev => ({
      ...prev,
      riskScore: calculatedRiskScore,
      alerts: calculatedRiskScore < 0.7 ? ['High-risk score detected.'] : [],
    }));
    setSwarmStatus(prev => ({ ...prev, riskAssessment: 'Complete' }));
  };

  // Simulates the Real-Time Vehicle Monitoring & Phygital Compliance Swarm
  const runComplianceSwarm = async () => {
    setSwarmStatus(prev => ({ ...prev, compliance: 'Running...' }));
    setSwarmOutputs(prev => ({ ...prev, complianceStatus: null, alerts: [] }));
    await simulateWork();

    // In production, the 'AuditAnalyzer' agent would process NFC data.
    // The 'AnomalyDetector' would check for inconsistencies.
    const isScanSuccessful = Math.random() > 0.1; // 90% chance of success
    const isAnomalyDetected = isScanSuccessful && Math.random() > 0.9; // 10% chance of anomaly
    const status = isScanSuccessful ? 'Verified' : 'Verification Failed';

    let newAlerts = [];
    if (!isScanSuccessful) {
      newAlerts.push('NFC verification failed. Possible fraud or hardware issue.');
    } else if (isAnomalyDetected) {
      newAlerts.push('Anomaly detected: GPS location does not match recent NFC scan. Flagging for manual review.');
    }

    setSwarmOutputs(prev => ({
      ...prev,
      complianceStatus: status,
      alerts: newAlerts,
    }));
    setSwarmStatus(prev => ({ ...prev, compliance: 'Complete' }));
  };

  // Simulates the Smart Contract Automation & State Synchronization Swarm
  const runContractAutomationSwarm = async () => {
    setSwarmStatus(prev => ({ ...prev, contractAutomation: 'Running...' }));
    setSwarmOutputs(prev => ({ ...prev, transactionStatus: null, alerts: [] }));
    await simulateWork();

    // In production, 'ContractInteractor' would submit a transaction,
    // and 'TransactionMonitor' would wait for the result.
    const isTransactionSuccessful = Math.random() > 0.05; // 95% chance of success
    const status = isTransactionSuccessful ? 'Transaction Confirmed' : 'Transaction Failed';

    let newAlerts = [];
    if (!isTransactionSuccessful) {
      newAlerts.push('On-chain transaction failed. Check gas price and contract state.');
    }

    setSwarmOutputs(prev => ({
      ...prev,
      transactionStatus: status,
      alerts: newAlerts,
    }));
    setSwarmStatus(prev => ({ ...prev, contractAutomation: 'Complete' }));
  };

  // Simulates the Market Intelligence & Dynamic Pricing Swarm
  const runMarketIntelligenceSwarm = async () => {
    setSwarmStatus(prev => ({ ...prev, marketIntelligence: 'Running...' }));
    setSwarmOutputs(prev => ({ ...prev, dynamicRate: null, alerts: [] }));
    await simulateWork();

    // In production, 'ruv-fann' and 'neuro-divergent' would be used by
    // agents like 'DemandForecaster' to predict optimal pricing.
    const marketBaseRate = 0.05;
    const marketTrendFactor = Math.random() * 0.02 - 0.01; // +/- 1% adjustment
    const optimizedRate = (marketBaseRate + marketTrendFactor).toFixed(4);

    setSwarmOutputs(prev => ({
      ...prev,
      dynamicRate: optimizedRate,
      alerts: [],
    }));
    setSwarmStatus(prev => ({ ...prev, marketIntelligence: 'Complete' }));
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 font-sans flex flex-col items-center p-6">
      <div className="w-full max-w-4xl">
        <h1 className="text-4xl font-bold text-center mb-10 text-transparent bg-clip-text bg-gradient-to-r from-teal-400 to-blue-500">
          ANVL AI Agent Swarm Dashboard
        </h1>

        <div className="grid md:grid-cols-2 gap-6">

          {/* Swarm 1: Risk Assessment & Underwriting */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700 hover:border-teal-400 transition-colors">
            <h2 className="text-2xl font-bold mb-4 text-teal-300">Swarm I: Risk Assessment</h2>
            <p className="text-sm mb-4 text-gray-400">
              Responsible for calculating a multi-factor risk score.
            </p>
            <div className="flex items-center justify-between mb-4">
              <span className="font-semibold">Status:</span>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                swarmStatus.riskAssessment === 'Running...' ? 'bg-yellow-500 text-black' :
                swarmStatus.riskAssessment === 'Complete' ? 'bg-green-500 text-white' :
                'bg-gray-600 text-gray-200'
              }`}>
                {swarmStatus.riskAssessment}
              </span>
            </div>
            {swarmOutputs.riskScore && (
              <div className="mt-2 text-xl font-bold">
                Final Risk Score: <span className="text-teal-400">{swarmOutputs.riskScore}</span>
              </div>
            )}
            <button
              onClick={runRiskAssessmentSwarm}
              disabled={swarmStatus.riskAssessment === 'Running...'}
              className="w-full mt-4 bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:bg-gray-600"
            >
              Run Risk Assessment
            </button>
          </div>

          {/* Swarm 2: Real-Time Compliance */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700 hover:border-blue-400 transition-colors">
            <h2 className="text-2xl font-bold mb-4 text-blue-300">Swarm II: Phygital Compliance</h2>
            <p className="text-sm mb-4 text-gray-400">
              Performs real-time monitoring and NFC-based audits.
            </p>
            <div className="flex items-center justify-between mb-4">
              <span className="font-semibold">Status:</span>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                swarmStatus.compliance === 'Running...' ? 'bg-yellow-500 text-black' :
                swarmStatus.compliance === 'Complete' && swarmOutputs.complianceStatus === 'Verified' ? 'bg-green-500 text-white' :
                swarmStatus.compliance === 'Complete' && swarmOutputs.complianceStatus === 'Verification Failed' ? 'bg-red-500 text-white' :
                'bg-gray-600 text-gray-200'
              }`}>
                {swarmStatus.compliance}
              </span>
            </div>
            {swarmOutputs.complianceStatus && (
              <div className="mt-2 text-xl font-bold">
                Verification Status: <span className={`${swarmOutputs.complianceStatus === 'Verified' ? 'text-green-400' : 'text-red-400'}`}>{swarmOutputs.complianceStatus}</span>
              </div>
            )}
            <button
              onClick={runComplianceSwarm}
              disabled={swarmStatus.compliance === 'Running...'}
              className="w-full mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:bg-gray-600"
            >
              Run Phygital Audit
            </button>
          </div>

          {/* Swarm 3: Contract Automation */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700 hover:border-purple-400 transition-colors">
            <h2 className="text-2xl font-bold mb-4 text-purple-300">Swarm III: Contract Automation</h2>
            <p className="text-sm mb-4 text-gray-400">
              Executes on-chain transactions and synchronizes data.
            </p>
            <div className="flex items-center justify-between mb-4">
              <span className="font-semibold">Status:</span>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                swarmStatus.contractAutomation === 'Running...' ? 'bg-yellow-500 text-black' :
                swarmStatus.contractAutomation === 'Complete' && swarmOutputs.transactionStatus === 'Transaction Confirmed' ? 'bg-green-500 text-white' :
                'bg-gray-600 text-gray-200'
              }`}>
                {swarmStatus.contractAutomation}
              </span>
            </div>
            {swarmOutputs.transactionStatus && (
              <div className="mt-2 text-xl font-bold">
                Transaction: <span className={`${swarmOutputs.transactionStatus === 'Transaction Confirmed' ? 'text-green-400' : 'text-red-400'}`}>{swarmOutputs.transactionStatus}</span>
              </div>
            )}
            <button
              onClick={runContractAutomationSwarm}
              disabled={swarmStatus.contractAutomation === 'Running...'}
              className="w-full mt-4 bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:bg-gray-600"
            >
              Execute On-chain Transaction
            </button>
          </div>

          {/* Swarm 4: Market Intelligence */}
          <div className="bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700 hover:border-pink-400 transition-colors">
            <h2 className="text-2xl font-bold mb-4 text-pink-300">Swarm IV: Market Intelligence</h2>
            <p className="text-sm mb-4 text-gray-400">
              Calculates dynamic interest rates based on market data.
            </p>
            <div className="flex items-center justify-between mb-4">
              <span className="font-semibold">Status:</span>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                swarmStatus.marketIntelligence === 'Running...' ? 'bg-yellow-500 text-black' :
                swarmStatus.marketIntelligence === 'Complete' ? 'bg-green-500 text-white' :
                'bg-gray-600 text-gray-200'
              }`}>
                {swarmStatus.marketIntelligence}
              </span>
            </div>
            {swarmOutputs.dynamicRate && (
              <div className="mt-2 text-xl font-bold">
                Dynamic Interest Rate: <span className="text-pink-400">{swarmOutputs.dynamicRate}</span>
              </div>
            )}
            <button
              onClick={runMarketIntelligenceSwarm}
              disabled={swarmStatus.marketIntelligence === 'Running...'}
              className="w-full mt-4 bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:bg-gray-600"
            >
              Get Dynamic Pricing
            </button>
          </div>

        </div>

        {/* Alerts and Logs */}
        {swarmOutputs.alerts.length > 0 && (
          <div className="mt-8 p-4 bg-red-800 rounded-xl shadow-lg border border-red-600">
            <h3 className="text-lg font-bold text-red-300 mb-2">Alerts</h3>
            <ul className="list-disc list-inside">
              {swarmOutputs.alerts.map((alert, index) => (
                <li key={index} className="text-sm text-red-100">{alert}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
